Bananer, 300, kg, 12.50
Kaffe, 301, st, 35.50
Godis, 302, kg, 98.90
Mjölk, 303, st, 19.50
Snus,304,st,49
Kex, 305, st, 13.90
Korv, 306, st, 35
Kött, 307, kg, 89
Parfym, 308, st, 78.50
Vatten, 309, st, 19.90
Mango, 310, st, 40
Skinka, 311, st, 59.90
Flingor, 312, st, 34.50
Soda vatten, 3012, st, 15.50

Detta är min Main:
using _01_Chamcash;
using System.Globalization;
using System.Text;

namespace _01_ChamCash
{
    class Program
    {

        static void Main(string[] args)
        {

            ProductEditor productEdit = new ProductEditor("../../../Products/ProductList.txt");
            Products products = new Products("../../../Products/ProductList.txt");
            List<string[]> productList = products.GetProductsFromFile(); // Initierar listan med produkter ifrån GetProducts metoden som är i ProductSearch klassen.
            Campaigns campaignPrice = new Campaigns();

            string removeCampaignString = null;
            string pay = null;

            bool menuIsRunning = true; // Håller menyn aktiv
            while (menuIsRunning)
            {
                string menuChoice = Menus.FirstMenu();
                Console.Clear();

                switch (menuChoice)
                {
                    case "1":
                        bool newCostumer = true; // Talar om för while-loopen att loopen är igång (true = 1 = på)
                        while (newCostumer)
                        {
                            float totalSum = 0.0f;
                            DateTime dateTime = System.DateTime.Now; // initierar dagens datum och tid ifrån datorsystemet till programmet




                            Menus.NewCostumerDisplay();


                            //Plussar på löpnummer efter varje kvitto
                            int serialNumber = 0;
                            string serialNumberFilePath = "../../../SerialNumber/serialNumber.txt";
                            if (File.Exists(serialNumberFilePath))
                            {
                                string serialNumberContent = File.ReadAllText(serialNumberFilePath);
                                if (int.TryParse(serialNumberContent, out serialNumber))
                                {
                                    serialNumber++;
                                }
                            }

                            string filePath = $"../../../Receipts/RECIEPT_{dateTime.ToString("yyyy-MM-dd")}.txt"; // filePath skapar en .txt fil. filePath är sökvägen där kvittot ska sparas. 
                            string receiptText = $"\n\n\tKVITTO\n ";
                            receiptText += $"{dateTime}\n" +
                     $"Kvitto:{serialNumber}\n" +
                     $"---------------------------\n";



                            List<string[]> receipt = new List<string[]>();


                            float totalPriceOfProduct = 0.0f;
                            bool productExist = true;
                            while (productExist)
                            {
                                int searchResult = -1;
                                int inputAmount = 0;

                                Console.Write("\n\tAnge Produkt-ID och antal med mellanslag: ");
                                string inputIdAndAmountString = Console.ReadLine();

                                string[] inputIdAndAmount = inputIdAndAmountString.Split(' ');
                                
                                if (inputIdAndAmount.Length == 2)
                                {
                                    string inputId = inputIdAndAmount[0];
                                    int.TryParse(inputIdAndAmount[1], out inputAmount);


                                    searchResult = Products.LinearSearch(productList, inputId);

                                    if (searchResult == -1)
                                    {
                                        Console.WriteLine("\n\tArtikeln finns ej med, tryck på enter för att fortsätta.");
                                        Console.ReadKey();
                                    }
                                    else
                                    {
                                        receipt.Add(new string[] { inputId,  inputAmount.ToString(), productList[searchResult][0], productList[searchResult][3], productList[searchResult][2] });
                                        receiptText += $"Produkt-ID: {inputId}, Antal: {inputAmount}\n";

                                        Console.WriteLine($"\t{productList[searchResult][0]} {productList[searchResult][3]}kr * {inputAmount}  ");
                                    }


                                }
                                else if (inputIdAndAmountString.ToUpper() == "PAY")
                                {
                                    receiptText += "---------------------------\n";
                                    foreach (var items in receipt)
                                    {
                                        if (float.TryParse(items[1], NumberStyles.Float, CultureInfo.InvariantCulture, out float inputAmountFloat) &&
                                            float.TryParse(items[3], NumberStyles.Float, CultureInfo.InvariantCulture, out float pricePerUnitFloat))
                                        {
                                            totalPriceOfProduct = inputAmountFloat * pricePerUnitFloat;
                                            receiptText += $"{items[2]}\t{items[1]}st\t{items[3]}kr /{items[4]} = {totalPriceOfProduct}kr\n";
                                            totalSum += totalPriceOfProduct;
                                        }

                                        else
                                        {
                                            Console.WriteLine("\tOgiltigt kvitto!!");
                                        }

                                        campaignPrice.GetCampaignFromFile();
                                        var validCampaign = campaignPrice._campaignPrices.Find(campaign => campaign._productId == items[0] && DateOnly.FromDateTime(DateTime.Now) >= campaign._startDate && DateOnly.FromDateTime(DateTime.Now) <= campaign._endDate);

                                        if (validCampaign != null)
                                        {
                                            float discount = totalPriceOfProduct / campaignPrice._price;
                                            float discountSum = totalSum -= discount;
                                            receiptText += $"Kampanjpris för {items[2]}: {campaignPrice._price}% rabatt = {discountSum}";
                                        }
                                        else
                                        {
                                            Console.WriteLine("Inga kampanjer existerar!");
                                        }

                                    }

                                    receiptText += $"\n\tTotalt: {totalSum:0.00}kr\n-------------------------- ";
                                    if (inputIdAndAmountString.ToUpper() == "PAY")
                                    {

                                        File.AppendAllText(filePath, receiptText);
                                        Console.WriteLine(receiptText);
                                        Console.WriteLine("Kvittot har sparats, tryck på enter för att komma vidare.");

                                        receipt.Clear();
                                    }
                                    File.WriteAllText(serialNumberFilePath, serialNumber.ToString());

                                    Console.ReadKey();
                                    Console.Clear();
                                    productExist = false;
                                    newCostumer = false;
                                }
                                else if (inputIdAndAmountString == "0")
                                {
                                    Console.Clear();
                                    productExist = false;
                                    newCostumer = false;
                                }
                                else
                                {
                                    Console.WriteLine("\tFel format. Var god ange både Produkt-ID och Antal med ett mellanslag innan antalet!");

                                    if (inputIdAndAmountString.ToLower() == "bajskorv" || inputIdAndAmountString.ToLower() == "bajs")
                                        Console.WriteLine("\tBajs/Bajskorv funkar inte heller");
                                }


                            }

                        }
                        break;


                    case "2":
                        bool adminRunning = true;

                        while (adminRunning)
                        {
                            string adminChoice = Menus.AdminMenu();
                            Console.Clear();

                            switch (adminChoice)
                            {
                                case "1":
                                    productEdit.CreateNewProduct(productList);
                                    Console.Clear();
                                    break;
                                case "2":
                                    productEdit.EditProduct(productList);
                                    Console.Clear();
                                    break;
                                case "3":
                                    campaignPrice.CreateCampaign();
                                    break;
                                case "0":
                                    Console.Clear();
                                    adminRunning = false;
                                    break;
                                default:
                                    Console.WriteLine("Du har angett fel meny val, tryck på enter för att fortsätta!");

                                    if (adminChoice == "bajskorv" || adminChoice == "bajs")
                                        Console.WriteLine("Bajs/Bajskorv funkar inte!");

                                    Console.ReadKey();
                                    Console.Clear();
                                    break;

                            }
                        }
                        break;



                    case "0":
                        Console.WriteLine("\t---------");
                        Console.WriteLine("\t||Hejdå||");
                        Console.WriteLine("\t---------");
                        menuIsRunning = false;
                        Thread.Sleep(2000);
                        break;

                    default:
                        Console.WriteLine("Du har angett fel meny val, tryck på enter för att fortsätta!");

                        if (menuChoice == "bajskorv" || menuChoice == "bajs")
                            Console.WriteLine("Bajs/Bajskorv funkar inte! Hur gammal är du egentligen!");

                        Console.ReadKey();
                        Console.Clear();
                        break;

                }
            }
        }
    }
}










//lägg till felhantering för att skapa ny produkt.
//fixa så att _price får ett värde av kampanjpriset.
//--kalla på GetCampaignFromFile() i main för att lägga till kampanj i kvitto
//--krashar när man skriver ett produkt id i linearSearch[V]
//ändra procent till helpris i kampanj.
//--fixa input för kampanj filen[V]
//--produkter i kassasystemet ska lagras i fil [V]
//--hamnar i en loop när jag lägger till kampanjer. kan inte gå tillbaka från menyn.[V]
//--Går inte betala med stora bokstäver PAY [V]
//--Lägg till kr i uppvisning. (nykund)[V]
//--Fixa enhetsinmatning utan / i "lägga till produkter" [V]
//--Inmatning av Produkt-Id och antal ska vara samma rad med mellanrum [V]
//--Angivna artiklar ska visas i konsollen medan man fyller på kvittot.[V]
//--lägg till felmedelande för inmatning av fel antal produkter. [V]
//--Kvitto ska sparas i annan fil med tid och datum. [V]
//--lägg till toUpper. [V]
//styla meny bättre
//--Lägg till DateOnly istället för datetime för kvittofilen. [V]

// KassaSystemet
// 0. Data Seeding
// 1. write Menu 
// 2. Userinput (switch, console.readline, if-Satser, Loopar, Variabler.
// 3. stringmanipulation
// 4. File IO
// 5. PAY
// 6. File IO
// 7. User Message.

Detta är kampanj klassen:
using _01_ChamCash;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Channels;
using System.Threading.Tasks;

namespace _01_Chamcash
{
    class Campaigns : Products
    {
        public List<Campaigns> _campaignPrices { get; set; } = new List<Campaigns>();
        private List<string[]> _products;
        public static string _campaignFilePath = "../../../Campaigns/CampaignList.txt";


        public string _productId { get; set; }
        public DateOnly _startDate { get; set; }
        public DateOnly _endDate { get; set; }
        public float _price { get; set; }



        public Campaigns(string productId, DateOnly startDate, DateOnly endDate, float price, string productFilePath) : base(productFilePath)
        {
            _productId = productId;
            _startDate = startDate;
            _endDate = endDate;
            _price = price;
        }
        public Campaigns() : base("../../../Products/ProductList.txt")
        {
            _products = new List<string[]>();
        }

        public void GetCampaignFromFile()
        {
            string[] campaignlines = File.ReadAllLines(_campaignFilePath);

            foreach (string line in campaignlines)
            {
                string[] campaignInfo = line.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);

                if (campaignInfo.Length == 5)
                {
                    string productId = campaignInfo[1];

                    if (DateOnly.TryParse(campaignInfo[2].Trim(), out DateOnly startDate) &&
                        (DateOnly.TryParse(campaignInfo[3].Trim(), out DateOnly endDate) &&
                        (float.TryParse(campaignInfo[4].Trim(), out float price))))
                    {
                        Campaigns campaign = new Campaigns(productId, startDate, endDate, price, _productFilePath);
                        _campaignPrices.Add(campaign);
                    }
                    else
                    {
                        Console.WriteLine($"Felaktig information i filen: " + line);
                    }
                }
                else
                {
                    Console.WriteLine($"Felaktig information i filen: " + line);

                }
            }
        }
        public void AddCampaignToFile(List<Campaigns> newCampaign)
        {
                string line = String.Join(", ", newCampaign);

                File.AppendAllText(_campaignFilePath, line);

            newCampaign.Clear();
            
        }
        public void AddActiveCampaign(Campaigns campaign)
        {
            _campaignPrices.Add(campaign);
            AddCampaignToFile(_campaignPrices);
        }
        public void RemoveActiveCampaign(string productToRemove)
        {
            DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
            _campaignPrices.RemoveAll(campaign => campaign._endDate < currentDate && campaign._productId == productToRemove);
        }
        public void RemoveCampaign(string removeCampaignstring)
        {
            Campaigns campaignToRemove = _campaignPrices.Find(campaign => campaign._productId == removeCampaignstring);
            if (campaignToRemove != null)
            {
                _campaignPrices.Remove(campaignToRemove);
                Console.WriteLine("Kampanjen har tagits bort!");
            }
            else
            {
                Console.WriteLine("En kampanj på det angivna product-ID existerar inte!");
            }
        }
        public override string ToString()
        {
            return $"Kampanj: {_productId}, {_startDate}, {_endDate}, {_price}";
        }
        public void CreateCampaign()
        {
            var campaignChoice = Menus.CampaignMenu();
            var products = new Products("../../../Products/ProductList.txt");


            bool campaignManagmentRunning = true;
            while (campaignManagmentRunning)
            {
                switch (campaignChoice)
                {
                    case "1":
                        Console.Write("Skriv Produkt-ID för produkten: ");
                        string productToAddCampaign = Console.ReadLine();
                        int searchresult = Products.LinearSearch(products.GetProductsFromFile(), productToAddCampaign);

                        if (searchresult != -1)
                        {
                            Console.Write("Ange ett start datum för kampanjen (åååå-MM-dd): ");
                            if (DateOnly.TryParse(Console.ReadLine(), out DateOnly startDate))
                            {
                                Console.Write("Ange slut datum för kampanjen (åååå-MM-dd): ");
                                if (DateOnly.TryParse(Console.ReadLine(), out DateOnly endDate))
                                {
                                    Console.Write("Lägg till en rabatt i procent (%): ");
                                    if (float.TryParse(Console.ReadLine(), out float campaignPrice))
                                    {
                                        Campaigns newCampaignPrice = new Campaigns(productToAddCampaign, startDate, endDate, campaignPrice, "../../../Products/ProductList.txt");
                                        if (newCampaignPrice._endDate >= DateOnly.FromDateTime(DateTime.Now))
                                        {
                                            AddActiveCampaign(newCampaignPrice);
                                        }
                                        Console.WriteLine("wohoo kampanjpriser har uppdaterats!!");
                                        campaignManagmentRunning = false;
                                        Console.ReadKey();
                                        Console.Clear();
                                    }
                                    else
                                    {
                                        Console.WriteLine("Du har anget ett ogiltigt kampanjpris!");
                                    }
                                }
                                else
                                {
                                    Console.WriteLine("Du har anget ett ogiltigt slut datum!");
                                }
                            }
                            else
                            {
                                Console.WriteLine("Du har anget ett ogiltigt start datum!");
                            }
                        }
                        else if (productToAddCampaign == "0")
                        {
                            Console.Clear();
                            campaignChoice = Menus.CampaignMenu();

                        }
                        else
                        {
                            Console.WriteLine("Producten finns inte, försök igen!");
                        }
                        break;
                    case "2":
                        Console.Write("Ange product-ID på vars kampanj du vill ta bort: ");
                        string productToRemove = Console.ReadLine();

                        RemoveCampaign(productToRemove);
                        RemoveActiveCampaign(productToRemove);

                        if (productToRemove == "0")
                        {
                            Console.Clear();
                            campaignChoice = Menus.CampaignMenu();
                        }
                        break;
                    case "0":
                        campaignManagmentRunning = false;
                        Console.Clear();
                        break;

                    default:
                        Console.WriteLine("Du har angett fel meny val, tryck på enter för att fortsätta!");
                        Console.ReadKey();
                        Console.Clear();
                        campaignChoice = Menus.CampaignMenu();

                        break;
                }
            }
        }
    }
}

Detta är produkt klassen:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _01_ChamCash
{
    public class Products
    {
        public List<string[]> _productList;
        public static string _productFilePath = "../../../Products/ProductList.txt";

        public Products(string productFilePath)
        {
            _productFilePath = productFilePath;
            _productList = GetProductsFromFile();

        }
        public List<string[]> GetProductsFromFile()
        {
            string[] productlines = File.ReadAllLines(_productFilePath);

            List<string[]> products = new List<string[]>();
            foreach (string line in productlines)
            {
                string[] productInfo = line.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                products.Add(productInfo);
            }
            return products;
        }


        public static int LinearSearch(List<string[]> searchProducts, string stringInput)
        {
            for (int i = 0; i < searchProducts.Count; i++)
            {
                if (searchProducts[i][1] == stringInput)
                {
                    return i;
                }
            }
            return -1;
        }

        public void SaveProductsToFile(string[] newproduct)
        {
            string line = String.Join(", ", newproduct);

            File.AppendAllText(_productFilePath, line + Environment.NewLine);
        }
        
    }
}

Detta är produktredigerar klassen:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _01_ChamCash
{
    public class ProductEditor : Products
    {
        public ProductEditor(string productFilePath) : base(productFilePath)
        {

        }

        public void EditProduct(List<string[]> productToEdit)
        {
            Console.WriteLine("\t---------------------------");
            Console.WriteLine("\t||Redigering av produkter||");
            Console.WriteLine("\t---------------------------\n");

            Console.Write("\tAnge Produkt-ID för produkten som ska redigeras: ");
            string oldProductId = Console.ReadLine();
            int searchResult = LinearSearch(productToEdit, oldProductId);
            if (searchResult != -1)
            {
                Console.Write("\tAnge ett nytt namn: ");
                string newName = Console.ReadLine();

                Console.Write("\tAnge ett nytt pris: ");
                string newPrice = Console.ReadLine();

                Console.Write("\tAnge antingen st eller kg: ");
                string newUnit = Console.ReadLine();

                string[] editedProduct = { newName, oldProductId, newUnit, newPrice };

                int index = _productList.FindIndex(product => product[1] == oldProductId);

                if (searchResult != -1)
                {
                    _productList[index][0] = editedProduct[0];
                    _productList[index][3] = editedProduct[3];
                    _productList[index][2] = editedProduct[2];

                    string updatedLine = string.Join(", ", _productList[index]);

                    List<string> lines = File.ReadAllLines(_productFilePath).ToList();

                    lines[index] = updatedLine;

                    File.WriteAllLines(_productFilePath, lines);
                }

                Console.WriteLine("\tProdukten har updaterats!");
                Console.WriteLine("\tTryck på enter för att fortsätta... ");
                Console.ReadKey();
                Console.Clear();

            }
            else
            {
                Console.WriteLine("Produkt-ID hittades ej, försökt igen!");
            }

        }
        
        public void CreateNewProduct(List<string[]> product)
        {
            Console.WriteLine("\t-------------------------");
            Console.WriteLine("\t||Lägg till en produkt ||");
            Console.WriteLine("\t-----------------------\n");
            Console.Write("\n\n\tAnge produkt-ID: ");
            string productId = Console.ReadLine();
            int searchResult = LinearSearch(product, productId);
            if (searchResult == -1)
            {

                Console.Write("\tAnge produktens namn: ");
                string productName = Console.ReadLine();



                Console.Write("\tAnge ett pris: ");
                string productprice = Console.ReadLine();

                Console.Write("\tAnge antingen st eller kg: ");
                string productUnit = Console.ReadLine();

                string[] newProduct = { productName, productId, productUnit, productprice };
                SaveProductsToFile(newProduct);

                Console.WriteLine("\tProdukten har sparats! Tryck på enter för att fortsätta.");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("\tProdukt-ID existerar redan! tryck enter för att fortsätta");
                Console.ReadKey();
                Console.Clear();
            }

        }
    }
}
Detta är .txt filen som lagrar kampanjerna:
Kampanj: 300, 2023-11-06, 2023-11-10, 20
Kampanj: 304, 2023-11-07, 2023-11-10, 23
Kampanj: 306, 2023-11-06, 2023-11-30, 10

När jag skrivit in att jag vil köpa produkt id 300 i ny kund menyn och skriver pay så ska den skriva in och implementera en rabatt för produkten i kvittot men campaignPrice._price är 0 fast det ska vara 20 varför blir det så?